<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>JT_Blog</title>
<link>https://joeltekoniemi.github.io/Applied-Bioinformatics-Blog/</link>
<atom:link href="https://joeltekoniemi.github.io/Applied-Bioinformatics-Blog/index.xml" rel="self" type="application/rss+xml"/>
<description>Joels blog for Applied Bioinformatics</description>
<generator>quarto-1.8.25</generator>
<lastBuildDate>Fri, 10 Oct 2025 22:00:00 GMT</lastBuildDate>
<item>
  <title>MedBioInfo 2025</title>
  <dc:creator>Joel Tekoniemi</dc:creator>
  <link>https://joeltekoniemi.github.io/Applied-Bioinformatics-Blog/posts/MedBioInfo/MedBioInfo2025.html</link>
  <description><![CDATA[ 





<section id="class-of-2025" class="level1">
<h1>Class of 2025!</h1>
<p>After receiving our pink unicorn T-shirts&amp;#8482, we took our group picture and had lunch together! <img src="https://joeltekoniemi.github.io/Applied-Bioinformatics-Blog/posts/MedBioInfo/pink-unicorns.png" class="img-fluid" alt="Pink unicorn gang"></p>
</section>
<section id="course-dinner" class="level1">
<h1>Course Dinner</h1>
<p>On Wednesday, we all (except some deserters) met at Tzatsiki for a greek dinner in the Mediterranean town of Uppsaliki! <img src="https://joeltekoniemi.github.io/Applied-Bioinformatics-Blog/posts/MedBioInfo/.png" class="img-fluid"></p>


</section>

 ]]></description>
  <category>people</category>
  <guid>https://joeltekoniemi.github.io/Applied-Bioinformatics-Blog/posts/MedBioInfo/MedBioInfo2025.html</guid>
  <pubDate>Fri, 10 Oct 2025 22:00:00 GMT</pubDate>
  <media:content url="https://joeltekoniemi.github.io/Applied-Bioinformatics-Blog/posts/MedBioInfo/ggplot2-graph-syntax.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Day 5</title>
  <dc:creator>Joel Tekoniemi</dc:creator>
  <link>https://joeltekoniemi.github.io/Applied-Bioinformatics-Blog/posts/Day5/Day5.html</link>
  <description><![CDATA[ 





<section id="visualise-your-data-with-ggplot2" class="level1">
<h1>Visualise your data with ggplot2</h1>
<p>By Abu Bakar Siddique, adapted from RaukR workshop at NBIS</p>
<section id="graphs-to-show-data" class="level2">
<h2 class="anchored" data-anchor-id="graphs-to-show-data">Graphs to show data</h2>
<p>Base R or ggplot2</p>
<section id="ggplot2" class="level3">
<h3 class="anchored" data-anchor-id="ggplot2">ggplot2</h3>
<p>•&nbsp;Consistent coding •&nbsp;Flexible •&nbsp;More complicated syntax for simple plots, easier for complex plots •&nbsp;Saved to object</p>
</section>
</section>
<section id="grammar-of-graphics" class="level2">
<h2 class="anchored" data-anchor-id="grammar-of-graphics">Grammar of Graphics</h2>
<p>Leland Wilkinson’s The Grammar of Graphics —&gt; Hadley Wickham ggplot2 in 2005 <img src="https://joeltekoniemi.github.io/Applied-Bioinformatics-Blog/posts/Day5/ggplot2-graph-syntax.png" class="img-fluid"></p>
<section id="plotting-using-functions" class="level3">
<h3 class="anchored" data-anchor-id="plotting-using-functions">Plotting using functions:</h3>
<p>•&nbsp;Data: input data always in data.frame format —&gt; str() to get structure of data •&nbsp;Aesthetic: mapping or visual characteristics of the geometry •&nbsp;Geometries: geometry representing data - points, lines, … •&nbsp;Facets: split plot into subplot •&nbsp;Statistics: statistical transformation- counts, means, … •&nbsp;Coordinates: numeric system to determine position of geometry - cartesian, polar, … •&nbsp;Scale: how visual characteristics are converted to display values •&nbsp;Theme: citrons points of display - font size, background colour, …</p>
</section>
<section id="data-formats" class="level3">
<h3 class="anchored" data-anchor-id="data-formats">Data formats</h3>
<p>Wide data: every variable as separate column. Long data: all numeric variables are in one column, also called tidy data. —&gt; column names into one column: variable —&gt; values into values column</p>
</section>
<section id="plotting-stats" class="level3">
<h3 class="anchored" data-anchor-id="plotting-stats">Plotting stats</h3>
<p>Stats can be plotted using “geom” argument in stat function call. All stats have default geometries.</p>
</section>
<section id="aesthetics" class="level3">
<h3 class="anchored" data-anchor-id="aesthetics">Aesthetics</h3>
<p>Mapping: aesthetics mapped to variable Parameter: defined, set values</p>
</section>
<section id="scales" class="level3">
<h3 class="anchored" data-anchor-id="scales">Scales</h3>
<p>Control positions, colour, fill, size, shape, alpha, linetype Syntax: scale_<aesthetic><em><type> Manual: scale</type></em><aes><em>manual Continuous: scale</em> press TAB —&gt; gradient, … Axes: scale_<axis>_<type></type></axis></aes></aesthetic></p>
</section>
<section id="facets" class="level3">
<h3 class="anchored" data-anchor-id="facets">Facets</h3>
<p>Split to subplot based on variable(s) Faceting in one dimension: facet_wrap(~variable) Two dimensions: facet_grid(variable_1 ~ variable_2) / facet_grid(var_1 + var_2)</p>
</section>
<section id="coordinate-systems" class="level3">
<h3 class="anchored" data-anchor-id="coordinate-systems">Coordinate systems</h3>
<p>Ex: Cartesian, map, polar</p>
</section>
<section id="theming" class="level3">
<h3 class="anchored" data-anchor-id="theming">Theming</h3>
<p>Modify non-data plot elements/appearance •&nbsp;Save an appearance for later reuse •&nbsp;?theme —&gt; theme_grey(), theme_bw() •&nbsp;Theme legend: control legend position theme(legend.<arg>) •&nbsp;Titles: labs() •&nbsp;Theme text: theme(axis.title = element_text(colour = …, size = …))</arg></p>
</section>
</section>
<section id="other-things-about-ggplot2" class="level2">
<h2 class="anchored" data-anchor-id="other-things-about-ggplot2">Other things about ggplot2</h2>
<p>•&nbsp;Theme rect: element_rect() •&nbsp;Theme reuse newtheme = theme_bw() + theme(…) p + new theme •&nbsp;Saving plots Function ggsave() •&nbsp;Combining plots Patchwork package patchwork::wrap_plots(p, q) + plot_annotation(tag_levels = “a”)</p>
</section>
<section id="other-things-about-r" class="level2">
<h2 class="anchored" data-anchor-id="other-things-about-r">Other things about R</h2>
<p>sessionInfo() Lists dependencies, versions and useful information when publishing data.</p>


</section>
</section>

 ]]></description>
  <category>diary</category>
  <guid>https://joeltekoniemi.github.io/Applied-Bioinformatics-Blog/posts/Day5/Day5.html</guid>
  <pubDate>Thu, 09 Oct 2025 22:00:00 GMT</pubDate>
  <media:content url="https://joeltekoniemi.github.io/Applied-Bioinformatics-Blog/posts/Day5/ggplot2-graph-syntax.png" medium="image" type="image/png" height="59" width="144"/>
</item>
<item>
  <title>Day 4</title>
  <dc:creator>Joel Tekoniemi</dc:creator>
  <link>https://joeltekoniemi.github.io/Applied-Bioinformatics-Blog/posts/Day4/Day4.html</link>
  <description><![CDATA[ 





<section id="nextflow" class="level1">
<h1>Nextflow</h1>
<section id="pipeline-setup" class="level2">
<h2 class="anchored" data-anchor-id="pipeline-setup">Pipeline setup</h2>
<p>It is pretty easy to setup nextflow pipelines with the help of nf-core, but there is nonetheless some configuration that is needed: - Create Pixi environment - add channels conda-forge and bioconda <code>-c conda-forge -c bioconda</code> - add packages nextflow and nf-core - Create data folder and other necessary folder for pipeline E.g. genome, results, Symbolic link <code>nl</code> for data to avoid copying - Navigate to the nf-core pipeline and use the installer</p>
<p>Example using the rna-seq pipeline</p>
<p>pixi run nextflow run nf-core/rnaseq -r 3.19.0 -resume -params-file nf-params.json -c hpc2n.config</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="rna-seq-pipeline.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Image: rna-seq-pipeline"><img src="https://joeltekoniemi.github.io/Applied-Bioinformatics-Blog/posts/Day4/rna-seq-pipeline.png" class="img-fluid figure-img" alt="Image: rna-seq-pipeline"></a></p>
<figcaption>Image: rna-seq-pipeline</figcaption>
</figure>
</div>
</section>
<section id="fancy-stuff" class="level2">
<h2 class="anchored" data-anchor-id="fancy-stuff">Fancy stuff</h2>
<ul>
<li>tags: tags are shown next to processes when running pipeline</li>
<li>workflow.onComplete: more info and user-friendly messages upon completed workflow</li>
</ul>


</section>
</section>

 ]]></description>
  <category>diary</category>
  <guid>https://joeltekoniemi.github.io/Applied-Bioinformatics-Blog/posts/Day4/Day4.html</guid>
  <pubDate>Wed, 08 Oct 2025 22:00:00 GMT</pubDate>
  <media:content url="https://joeltekoniemi.github.io/Applied-Bioinformatics-Blog/posts/Day4/thumbnail-nf-core.png" medium="image" type="image/png" height="55" width="144"/>
</item>
<item>
  <title>Day 3</title>
  <dc:creator>Joel Tekoniemi</dc:creator>
  <link>https://joeltekoniemi.github.io/Applied-Bioinformatics-Blog/posts/Day3/Day3.html</link>
  <description><![CDATA[ 





<section id="workflows" class="level1">
<h1>Workflows</h1>
<p>Workflow / pipeline = many scripts (usually one per tool), deployed one after the other</p>
<p>Workflow managers help to connect scripts in a pipeline, with automatic control over resource allocation and error management, e.g.&nbsp;re-submitting a batch job with double memory if it failed.</p>
<section id="nextflow" class="level2">
<h2 class="anchored" data-anchor-id="nextflow">Nextflow</h2>
<p>Open-source workflow manager. Channels: contain data, input / output Process: scripts</p>
<p>Queue channel: unidirectional FIFO queue, can be read only once in the pipeline</p>
<p>Value channel: can be read multiple times</p>
<p>Execution abstraction</p>
<section id="example-for-srun" class="level3">
<h3 class="anchored" data-anchor-id="example-for-srun">Example for srun:</h3>
<p><code>srun -A project_ID -t 15:00 -n 1 fastqc --noextract -o fastqc data data/sample_1.fastq.gz data/sample_2.fastq.gz</code></p>
<p>—&gt; mix of information about command and info about script in the same line In Nextflow, these are separate. Executor: determines how the script is run in the target platform</p>
</section>
</section>
<section id="netflow-scripts" class="level2">
<h2 class="anchored" data-anchor-id="netflow-scripts">Netflow scripts</h2>
<ol type="1">
<li><p>Adding variables into channel —&gt; Channel.of()</p></li>
<li><p>Defining process blocks Channel operators can be used on channels Input can be value, file, path, etc. —&gt; the variable type is specified Output is similar, can also be “stdout” which is just the terminal output</p></li>
<li><p>Workflow block</p></li>
</ol>
<p>Modify and resume Runs are cached, and the output can be retrieved using the -resume flag, instead of rerunning the whole script. Double-dashes can be specified to change nf process parameters: –greeting ‘Bonjour le monde’ —&gt; changes params.greeting.</p>
</section>
<section id="cleanup" class="level2">
<h2 class="anchored" data-anchor-id="cleanup">Cleanup</h2>
<p>nextflow log: see run history nextflow clean: deletes project cache and working directories. -before: cleans up previous runs pixi run nextflow clean -before <run name=""> -f</run></p>
</section>
<section id="rna-seq-pipeline" class="level2">
<h2 class="anchored" data-anchor-id="rna-seq-pipeline">RNA-seq pipeline</h2>
<p>Executor setup in nextflow.config Processes: slurm as executor + time, cpus, etc. Other statements: • Resume •&nbsp;Singularity containers •&nbsp;Executor account: E.g. HPC2N</p>
</section>
<section id="nf-core" class="level2">
<h2 class="anchored" data-anchor-id="nf-core">nf-core</h2>
<p>Community nextflow pipelines with extensive documentation.</p>
<p>Interesting pipelines •&nbsp;rnaseq: classic RNA-seq, provides gene expression matrix as output •&nbsp;pixelator: Pixelgen MPX/PNA data •&nbsp;raredisease: variant calling and scoring from WGS/WES from rare disease patients</p>
</section>
</section>
<section id="ai-in-bioinformatics" class="level1">
<h1>AI in Bioinformatics</h1>
<p>We ended the day with a short discussion about use of LLMs in bioinformatics.</p>
<p><a href="thumbnail.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://joeltekoniemi.github.io/Applied-Bioinformatics-Blog/posts/Day3/thumbnail.png" class="img-fluid"></a></p>


</section>

 ]]></description>
  <category>diary</category>
  <guid>https://joeltekoniemi.github.io/Applied-Bioinformatics-Blog/posts/Day3/Day3.html</guid>
  <pubDate>Tue, 07 Oct 2025 22:00:00 GMT</pubDate>
  <media:content url="https://joeltekoniemi.github.io/Applied-Bioinformatics-Blog/posts/Day3/nextflow.png" medium="image" type="image/png" height="46" width="144"/>
</item>
<item>
  <title>Day 2</title>
  <dc:creator>Joel Tekoniemi</dc:creator>
  <link>https://joeltekoniemi.github.io/Applied-Bioinformatics-Blog/posts/Day2/Day2.html</link>
  <description><![CDATA[ 





<section id="tuesday" class="level1">
<h1>Tuesday</h1>
<p>Today we set up some pixi environments and used slurm to submit batch jobs on the hpc2n cluster. Then, we explored the use of containers with apptainer. Everything done today was on the hpc2n remote cluster.</p>
<section id="pixi" class="level2">
<h2 class="anchored" data-anchor-id="pixi">Pixi</h2>
<p>The pixi environments are installed into folders and called using <code>pixi run &lt;...&gt;</code>. It’s pretty simple and new packages can be added to the environment using <code>pixi add &lt;package name&gt;</code>. If an environment is not needed anymore, we can delete the folder inside which the environment was created.</p>
</section>
<section id="job-scheduling-using-slurm" class="level2">
<h2 class="anchored" data-anchor-id="job-scheduling-using-slurm">Job scheduling using SLURM</h2>
<p>On the cluster, we can submit jobs to be run with automatic allocation of resources so that we can focus on other things.</p>
<p>Running pixi with slurm:</p>
<p><code>srun -A &lt;PROJECT-ID&gt; -t 15:00 -n 1 pixi run fastqc  --noextract -o fastqc &lt;PATH&gt;/joel/RNAseq-data/*.fastq.gz</code></p>
<p>In this case, we used an example data set of RNA-seq files and ran fastqc. The dataset is accessible at <a href="https://www.ebi.ac.uk/ena/browser/view/PRJNA369563">PRJNA369563</a></p>
</section>
<section id="containers" class="level2">
<h2 class="anchored" data-anchor-id="containers">Containers</h2>
<p>For this course, we used apptainer to run and build containers. Ready-made (rocommended) containers can be obtained from dockerhub or seqera, and in this case we used both. First, we pulled the vcftools container, after which we pulled fastqc in order to re-run qc on the sequencing reads above, but using a container and batch script. Running fastqc in a container: <code>apptainer exec ../containers/fastqc_0.12.1.sif fastqc -o ../fastqc-container --noextract ../*fastq.gz</code></p>
<section id="building-a-container" class="level3">
<h3 class="anchored" data-anchor-id="building-a-container">Building a container</h3>
<p>Using a definition file, containers can be built relatively simply. When the container is run using the <code>run</code> command, the code under the <code>%runscript</code> block will be run automatically. This can be overruled with the <code>exec</code> comand.</p>
<p>Examples:</p>
<p><code>$ apptainer run containers/lolcow.sif</code></p>
<p><code>$ apptainer exec containers/lolcow.sif "date|cowsay"</code></p>
<p>This is the peak of the day’s accomplishments, and we enjoy the company of our inspirational cow :). Here, have my favourite inspirational quote (after a couple iterations): <img src="https://joeltekoniemi.github.io/Applied-Bioinformatics-Blog/posts/Day2/thumbnail.png" class="img-fluid" alt="lolcow"></p>


</section>
</section>
</section>

 ]]></description>
  <category>diary</category>
  <guid>https://joeltekoniemi.github.io/Applied-Bioinformatics-Blog/posts/Day2/Day2.html</guid>
  <pubDate>Mon, 06 Oct 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Day 1</title>
  <dc:creator>Joel Tekoniemi</dc:creator>
  <link>https://joeltekoniemi.github.io/Applied-Bioinformatics-Blog/posts/Day1/Day1.html</link>
  <description><![CDATA[ 





<section id="monday" class="level1">
<h1>Monday</h1>
<p>On Monday, we covered some topics relating to good data practice, git and quarto. At the end of the day, we set ourselves up with individual blogs for documenting course progress.</p>
<section id="intro-to-course-by-amrei" class="level2">
<h2 class="anchored" data-anchor-id="intro-to-course-by-amrei">Intro to course by Amrei</h2>
<ol type="1">
<li><p>Introduction •&nbsp;Course content, schedule etc •&nbsp;People intros</p></li>
<li><p>Data management Data cycle FAIR principles Good data management practices •&nbsp;Research documentation •&nbsp;Data organisation •&nbsp;Information security •&nbsp;Ethics and legislation (Sweden: research data needs to be kept for 10 years)</p></li>
</ol>
<p>Data sets: central dogma of biology &lt;-&gt; bioinformatics</p>
<p>Best practices •&nbsp;Raw data in separate directory •&nbsp;Code in another directory •&nbsp;Output (figs) in separate directory •&nbsp;Version control •&nbsp;README in every directory •&nbsp;File naming that is easy to understand for humans and machines (no ö, spaces characters) •&nbsp;Use non-proprietary formats —&gt; .csv instead of .xlsx</p>
<ol start="3" type="1">
<li><p>Literate programming •&nbsp;Code chunks •&nbsp;Markdown Notebook in quarto</p></li>
<li><p>Version control Git and good git practices Clear and informative, commit often (multiple times per day - once per day) —&gt; Writing blog posts every day</p></li>
<li><p>Environment managers Using pixi in this course</p></li>
<li><p>Containers Includes everything necessary to run code and do the necessary analysis, including the OS.</p></li>
<li><p>Workflow manager —&gt; Nextflow</p></li>
</ol>
</section>
<section id="git-and-github-by-samuel-flores" class="level2">
<h2 class="anchored" data-anchor-id="git-and-github-by-samuel-flores">Git and GitHub by Samuel Flores</h2>
<p>•&nbsp;git branch •&nbsp;git checkout •&nbsp;git merge •&nbsp;git diff •&nbsp;git add •&nbsp;git commit -m “Message” Commit on a single theme, message should be in imperative •&nbsp;git push</p>
<p>Notes on branching • git branch —&gt; creates a new branch based on the current commit</p>
<p>Merging •&nbsp;specific branch or specific commit •&nbsp;conflicts need to be resolved</p>
<p>Add and commit •&nbsp;add —&gt; taking area •&nbsp;commit —&gt; send to repo</p>
<p>Push, pull and collaborate •&nbsp;git push origin main</p>
<p>Exercise: alphabetise a list •&nbsp;Format first name, last name • Branching •&nbsp;Merge with neighbours via commit, pull, merge and push until 14 names are in alphabetical order.</p>
<p><a href="thumbnail.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://joeltekoniemi.github.io/Applied-Bioinformatics-Blog/posts/Day1/thumbnail.png" class="img-fluid"></a></p>


</section>
</section>

 ]]></description>
  <category>diary</category>
  <guid>https://joeltekoniemi.github.io/Applied-Bioinformatics-Blog/posts/Day1/Day1.html</guid>
  <pubDate>Sun, 05 Oct 2025 22:00:00 GMT</pubDate>
</item>
</channel>
</rss>
